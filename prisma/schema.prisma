generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model User {
  id                 String              @id
  email              String              @unique(map: "users_email_unique")
  name               String
  isAdmin            Boolean?            @default(false) @map("is_admin")
  createdAt          DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  bio                String?
  interests          Json?               @default("[]")
  meetingLink        String?             @map("meeting_link")
  profileImage       String?             @map("profile_image")
  socialLinks        Json?               @default("{}") @map("social_links")
  availability       String?
  updatedAt          DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  headline           String?
  location           String?
  phone              String?
  website            String?
  summary            String?
  experience         Json?               @default("[]")
  education          Json?               @default("[]")
  skills             Json?               @default("[]")
  certifications     Json?               @default("[]")
  projects           Json?               @default("[]")
  awards             Json?               @default("[]")
  profileComplete    Boolean?            @default(false) @map("profile_complete")
  geminiApiKey       String?             @map("gemini_api_key")
  bannerImage        String?             @map("banner_image")
  profileVisibility  Json?               @default("{\"awards\": true, \"skills\": true, \"projects\": true, \"education\": true, \"experience\": true, \"certifications\": true}") @map("profile_visibility")
  onboardingComplete Boolean?            @default(false) @map("onboarding_complete")
  onboardingStep     Int?                @default(0) @map("onboarding_step")
  comments           Comment[]
  following          Connection[]        @relation("Following")
  followers          Connection[]        @relation("Followers")
  groupMemberships   GroupMember[]
  learning           Learning[]
  receivedMessages   Message[]           @relation("ReceivedMessages")
  sentMessages       Message[]           @relation("SentMessages")
  notes              Note[]
  notifications      Notification[]
  posts              Post[]
  progress           Progress[]
  reactions          Reaction[]
  studyGroupsCreated StudyGroup[]        @relation("Creator")
  submissions        Submission[]
  workflow_comments  workflow_comments[]
  workflow_likes     workflow_likes[]
  workflows          workflows[]

  @@map("users")
}

model Message {
  id         Int       @id @default(autoincrement())
  senderId   String    @map("sender_id")
  receiverId String?   @map("receiver_id")
  roomId     String?   @map("room_id")
  content    String
  type       String    @default("text")
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  receiver   User?     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_receiver_id_users_id_fk")
  sender     User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_sender_id_users_id_fk")

  @@index([receiverId, senderId, createdAt(sort: Desc)], map: "idx_messages_receiver_sender_time")
  @@index([receiverId, createdAt(sort: Desc)], map: "idx_messages_receiver_time")
  @@index([senderId, receiverId, createdAt(sort: Desc)], map: "idx_messages_sender_receiver_time")
  @@index([senderId, createdAt(sort: Desc)], map: "idx_messages_sender_time")
  @@map("messages")
}

model Post {
  id        Int        @id @default(autoincrement())
  userId    String     @map("user_id")
  content   String
  type      String     @default("text")
  metadata  Json?      @default("{}")
  createdAt DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  topic     String?
  comments  Comment[]
  user      User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_user_id_users_id_fk")
  reactions Reaction[]

  @@map("posts")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id")
  type      String
  content   String
  metadata  Json?     @default("{}")
  read      Boolean   @default(false)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_user_id_users_id_fk")

  @@index([userId, read, createdAt(sort: Desc)], map: "idx_notifications_user_read_time")
  @@map("notifications")
}

model Connection {
  id          Int       @id @default(autoincrement())
  followerId  String    @map("follower_id")
  followingId String    @map("following_id")
  status      String    @default("pending")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  follower    User      @relation("Following", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "connections_follower_id_users_id_fk")
  following   User      @relation("Followers", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "connections_following_id_users_id_fk")

  @@map("connections")
}

model Comment {
  id        Int        @id @default(autoincrement())
  postId    Int        @map("post_id")
  userId    String     @map("user_id")
  content   String
  createdAt DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  post      Post       @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_post_id_posts_id_fk")
  user      User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_user_id_users_id_fk")
  reactions Reaction[]

  @@index([postId], map: "idx_comments_post_id")
  @@map("comments")
}

model Reaction {
  id        Int       @id @default(autoincrement())
  postId    Int?      @map("post_id")
  commentId Int?      @map("comment_id")
  userId    String    @map("user_id")
  type      String
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reactions_comment_id_comments_id_fk")
  post      Post?     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reactions_post_id_posts_id_fk")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reactions_user_id_users_id_fk")

  @@index([postId], map: "idx_reactions_post_id")
  @@index([userId, postId, type], map: "idx_reactions_user_post")
  @@map("reactions")
}

model StudyGroup {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  topic       String
  createdBy   String        @map("created_by")
  createdAt   DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  members     GroupMember[]
  creator     User          @relation("Creator", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "study_groups_created_by_users_id_fk")

  @@map("study_groups")
}

model GroupMember {
  id       Int        @id @default(autoincrement())
  groupId  Int        @map("group_id")
  userId   String     @map("user_id")
  role     String     @default("member")
  joinedAt DateTime?  @default(now()) @map("joined_at") @db.Timestamp(6)
  group    StudyGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_members_group_id_study_groups_id_fk")
  user     User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_members_user_id_users_id_fk")

  @@map("group_members")
}

model Module {
  id                 Int       @id @default(autoincrement())
  moduleId           String    @unique(map: "modules_module_id_unique") @map("module_id")
  title              String
  slug               String    @unique(map: "modules_slug_unique")
  description        String
  instructor         Json
  duration           String
  skillLevel         String    @map("skill_level")
  introVideo         String    @map("intro_video")
  learningObjectives Json      @map("learning_objectives")
  slides             Json
  keyTakeaways       Json      @map("key_takeaways")
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  displayOrder       Int?      @default(0) @map("display_order")

  @@map("modules")
}

model Progress {
  id              Int       @id @default(autoincrement())
  userId          String    @map("user_id")
  moduleId        String    @map("module_id")
  completedSlides Json      @default("[]") @map("completed_slides")
  lastViewed      Int       @default(0) @map("last_viewed")
  completed       Boolean   @default(false)
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user            User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "progress_user_id_users_id_fk")

  @@map("progress")
}

model Note {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id")
  moduleId  String    @map("module_id")
  slideId   Int       @map("slide_id")
  content   String
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notes_user_id_users_id_fk")

  @@map("notes")
}

model Submission {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  content           String
  skillLevel        String    @map("skill_level")
  estimatedDuration String    @map("estimated_duration")
  status            String    @default("pending")
  submittedAt       DateTime? @default(now()) @map("submitted_at") @db.Timestamp(6)
  userId            String    @map("user_id")
  user              User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "submissions_user_id_users_id_fk")

  @@map("submissions")
}

model Newsletter {
  id        Int       @id @default(autoincrement())
  week      Int
  date      String
  title     String
  content   Json
  isCurrent Boolean?  @default(false) @map("is_current")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("newsletters")
}

model Learning {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id")
  moduleId  String    @map("module_id")
  status    String    @default("learning")
  startedAt DateTime? @default(now()) @map("started_at") @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "learning_user_id_users_id_fk")

  @@map("learning")
}

model workflow_comments {
  id          Int       @id @default(autoincrement())
  workflow_id Int
  user_id     String
  content     String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workflow_comments_user_id_users_id_fk")
  workflows   workflows @relation(fields: [workflow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workflow_comments_workflow_id_workflows_id_fk")
}

model workflow_likes {
  id          Int       @id @default(autoincrement())
  workflow_id Int
  user_id     String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workflow_likes_user_id_users_id_fk")
  workflows   workflows @relation(fields: [workflow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workflow_likes_workflow_id_workflows_id_fk")
}

model workflows {
  id                Int                 @id @default(autoincrement())
  user_id           String
  title             String
  description       String?
  category          String
  is_public         Boolean             @default(true)
  likes_count       Int                 @default(0)
  views_count       Int                 @default(0)
  forks_count       Int                 @default(0)
  forked_from       Int?
  nodes             Json                @default("[]")
  connections       Json                @default("[]")
  canvas_settings   Json?               @default("{\"pan\": {\"x\": 0, \"y\": 0}, \"zoom\": 1}")
  metadata          Json?               @default("{}")
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  workflow_comments workflow_comments[]
  workflow_likes    workflow_likes[]
  workflows         workflows?          @relation("workflowsToworkflows", fields: [forked_from], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workflows_forked_from_workflows_id_fk")
  other_workflows   workflows[]         @relation("workflowsToworkflows")
  users             User                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workflows_user_id_users_id_fk")
}
